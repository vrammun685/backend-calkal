# Generated by Django 5.1.3 on 2025-05-21 17:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alimento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(max_length=10, unique=True)),
                ('nombre_es', models.CharField(max_length=50)),
                ('nombre_en', models.CharField(max_length=50)),
                ('calorias', models.FloatField()),
                ('grasas', models.FloatField()),
                ('proteinas', models.FloatField()),
                ('carbohidratos', models.FloatField()),
                ('medida', models.CharField(choices=[('g', 'Gramos'), ('ml', 'Mililitros')], default='g', max_length=20)),
            ],
            options={
                'verbose_name': 'Alimento',
                'verbose_name_plural': 'Alimentos',
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('altura', models.FloatField(blank=True, null=True)),
                ('edad', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(12)])),
                ('peso', models.FloatField(blank=True, null=True)),
                ('imagen_Perfil', models.ImageField(blank=True, null=True, upload_to='')),
                ('genero', models.CharField(blank=True, choices=[('Masculino', 'Masculino'), ('Femenino', 'Femenino')], default='Selecciona biologicamente', max_length=100, null=True)),
                ('objetivo', models.CharField(blank=True, choices=[('Perder peso', 'Perder peso'), ('Mantener peso', 'Mantener peso'), ('Ganar peso', 'Ganar peso')], default='Selecciona una opcion', max_length=200, null=True)),
                ('actividad', models.CharField(blank=True, choices=[('Nula', 'Nula'), ('1 a 2 veces en semana', '1 a 2 veces en semana'), ('3 a 5 veces en semana', '3 a 5 veces en semana'), ('6 a 7 veces en semana', '6 a 7 veces en semana'), ('Ejercicio intenso a diario', 'Ejercicio intenso a diario')], default='Selecciona una opcion', max_length=30, null=True)),
                ('notificaciones', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comida',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=20)),
                ('numeroPorciones', models.FloatField(default=1)),
                ('calorias', models.FloatField()),
                ('proteinas', models.FloatField()),
                ('grasas', models.FloatField()),
                ('carbohidratos', models.FloatField()),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comidas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comida',
                'verbose_name_plural': 'Comidas',
            },
        ),
        migrations.CreateModel(
            name='AlimentoComida',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.FloatField()),
                ('alimento', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kal_app.alimento')),
                ('comida', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alimentos', to='kal_app.comida')),
            ],
            options={
                'verbose_name': 'Ingrediente',
                'verbose_name_plural': 'Ingredientes',
            },
        ),
        migrations.CreateModel(
            name='Diario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField(auto_now_add=True)),
                ('calorias_Consumidas', models.FloatField(blank=True, default=0, null=True)),
                ('calorias_a_Consumir', models.FloatField(blank=True, default=0, null=True)),
                ('proteinas_Consumidas', models.FloatField(blank=True, default=0, null=True)),
                ('proteinas_a_Consumir', models.FloatField(blank=True, default=0, null=True)),
                ('grasas_Consumidas', models.FloatField(blank=True, default=0, null=True)),
                ('grasas_a_Consumir', models.FloatField(blank=True, default=0, null=True)),
                ('carbohidratos_Consumidas', models.FloatField(blank=True, default=0, null=True)),
                ('carbohidratos_a_Consumir', models.FloatField(blank=True, default=0, null=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diarios', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Diario',
                'verbose_name_plural': 'Diarios',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='ComidaConsumida',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parte_del_dia', models.CharField(choices=[('Desayuno', 'Desayuno'), ('Almuerzo', 'Almuerzo'), ('Cena', 'Cena'), ('Otro', 'Otro')], default='Selecciona una opcion', max_length=30)),
                ('porcion_a_comer', models.FloatField()),
                ('comida', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kal_app.comida')),
                ('diario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comidas', to='kal_app.diario')),
            ],
        ),
        migrations.CreateModel(
            name='AlimentoConsumido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parte_del_dia', models.CharField(choices=[('Desayuno', 'Desayuno'), ('Almuerzo', 'Almuerzo'), ('Cena', 'Cena'), ('Otro', 'Otro')], default='Otro', max_length=30)),
                ('cantidad', models.FloatField()),
                ('alimento', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kal_app.alimento')),
                ('diario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alimentos_consumidos', to='kal_app.diario')),
            ],
            options={
                'verbose_name': 'Alimento Consumido',
                'verbose_name_plural': 'Alimentos Consumidos',
            },
        ),
        migrations.CreateModel(
            name='PesoRegistrado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('peso', models.FloatField()),
                ('fecha', models.DateField(default=django.utils.timezone.now)),
                ('foto_pesaje', models.ImageField(blank=True, null=True, upload_to='')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pesos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Pesos Registrados',
                'verbose_name_plural': 'Lista de Pesos registrados',
            },
        ),
    ]
